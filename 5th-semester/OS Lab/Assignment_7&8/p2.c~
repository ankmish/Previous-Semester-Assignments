/*

The Dining Philosopher Problem â€“ The Dining Philosopher Problem states that K philosophers seated around a circular table
						   with one chopstick between each pair of philosophers. There is one chopstick between each
						   philosopher. A philosopher may eat if he can pickup the two chopsticks adjacent to him. 
						   One chopstick may be picked up by any one of its adjacent followers but not both. 
*/

/*
There are three states of philosopher : THINKING, HUNGRY and EATING.

Utiltiy --->
			 There are two semaphores : Mutex and a semaphore array for the philosophers. Mutex is used such that no two 
			 philosophers may access the pickup or putdown at the same time. The array is used to control the behavior of 
			 each philosopher. 
*/


#include <pthread.h> 
#include <semaphore.h> 
#include <stdio.h> 
#include<malloc.h>
#include<stdlib.h>
  
#define n 5 
#define THINKING 2 
#define HUNGRY 1 
#define EATING 0 
#define LEFT (phnum + 4) % n
#define RIGHT (phnum + 1) % n   
int state[n]; 
int phil[n] = { 0, 1, 2, 3, 4 }; 
sem_t mutex; 
sem_t S[n]; 
void test(int phnum) 
{ 
    if (state[phnum] == HUNGRY  && state[LEFT] != EATING && state[RIGHT] != EATING) 
    { 
        // state that eating 
        state[phnum] = EATING; 
        sleep(2); 
        printf("Philosopher %d takes fork %d and %d\n",phnum + 1, LEFT + 1, phnum + 1); 
        printf("Philosopher %d is Eating\n", phnum + 1); 
        // sem_post(&S[phnum]) has no effect 
        // during takefork 
        // used to wake up hungry philosophers 
        // during putfork 
        sem_post(&S[phnum]); 
    } 
} 
// take up chopsticks 
void take_fork(int phnum) 
{ 
    sem_wait(&mutex); 
    // state that hungry 
    state[phnum] = HUNGRY;   
    printf("Philosopher %d is Hungry\n", phnum + 1);   
    // eat if neighbours are not eating 
    test(phnum);   
    sem_post(&mutex);   
    // if unable to eat wait to be signalled 
    sem_wait(&S[phnum]);  
    sleep(1); 
} 
// put down chopsticks 
void put_fork(int phnum) 
{ 
    sem_wait(&mutex); 
    // state that thinking 
    state[phnum] = THINKING; 
    printf("Philosopher %d putting fork %d and %d down\n",phnum + 1, LEFT + 1, phnum + 1); 
    printf("Philosopher %d is thinking\n", phnum + 1); 
    test(LEFT); 
    test(RIGHT);  
    sem_post(&mutex); 
} 
void* philospher(void* num) 
{ 
    while (1)
    {  
        int* i = num; 
        sleep(1); 
        take_fork(*i); 
        sleep(0); 
        put_fork(*i); 
    } 
}  
int main() 
{  
    pthread_t thread_id[n];
    int i; 
    sem_init(&mutex,0,1);  // initialize the semaphores (0 means this sem. is shared between threads and initial value = 1)  
    for (i = 0; i < n; i++) 
         sem_init(&S[i], 0, 0); 
  
    for (i = 0; i < n; i++) 
    {  
        pthread_create(&thread_id[i], NULL,philospher,&phil[i]);  // create philosopher processes 
        printf("Philosopher %d is thinking\n", i + 1); 
    } 
    for (i = 0; i < n; i++) 
        pthread_join(thread_id[i], NULL); 
       
     return 0;
} 
